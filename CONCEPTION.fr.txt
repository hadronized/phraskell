On va factoriser au taquet.

Les fractales sont représentées de deux manières : la fractale comme une suite, comme celle de Mandelbrot, à
savoir z_(n+1) = z_n^2 + c, et la fractale représentée. La fractale au sens suite est définie dans le module Fractal,
qui propose d’ailleurs quelques fractales de base, comme Mandelbrot. Ensuite, tout ce qui vient autour, qui permet
de représenter la fractale, c’est ce que l’on appellera le module FractalModel. Ce module contient toutes les
structures qui permettent de représenter sous les équations fractales. On y trouve des fonctions qui génèrent à
partir d’une équation un modèle de fractale. Un modèle de fractale est une représentation en espace fini de sa
suite respective, à savoir une liste / un tableau, placé dans un référentiel donné. Ce référentiel est généré
avec une fonction dédiée nommée fractalRef :

fractalRef :: Float -> Float -> (FComplex -> FComplex) -> FractalRef

Cette fonction attend width, height et la fonction a appeler pour générer le référentiel. fractalRef prend déjà
en compte la mise en référentiel cartésien. La fonction passée en paramètre peut donc modifier ce référentiel
si elle veut. Sinon, on peut passer id pour avoir un référentiel normalisé.
On peut composer des appels à oZoom et offsets. oZoom prend un Float, qui représente un niveau de zoom, et applique
ce niveau de zoom sur un complexe, permettant de zoomer ce complexe. offsets permet de translater de la même
manière un complexe. Au final, on obtient un FractalRef, qui est un référentiel sur lequel on va pouvoir
travailler pour générer le modèle de la fractale.

À partir d’un référentiel, on va vouloir obtenir une représentation de notre fractale sur ce référentiel. On va
donc avoir une première représentation nommée IterFrame, qui est une frame de valeurs d’itérations. Il nous faut
une fonction qui prend un référentiel, une équation, et génère la représentation voulue – à savoir un FractalModel.

Générer un FractalModel, et plus particulièrement une IterFrame, demande deux choses : un référentiel, et une suite.
C’est tout. Sauf qu’en vrai, le référentiel va être généré à ce moment là. On va donc prendre en paramètre une
autre data : Viewer. Viewer nous permet de stocker toutes les informations actuelles relatives à un modèle de
fractale.

Une fois que l’on a la représentation de la fractale, on peut simplement la passer à la vue.
